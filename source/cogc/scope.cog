// scope.cog

struct ScopeLink
{
	var container : ContainerStmt;
	var next : Ptr<ScopeLink> = nullptr;
}

struct Scope
{
	var parent : Ptr<Scope>;
	var directLink : ScopeLink;
}

func lookupDirectImpl(
	container: ContainerStmt,
	name: Ptr<Name>,
	ioResult: Ptr<LookupResult>)
{
//        fprintf(stderr, "LOOKUP '%s' IN: %s\n",
//            getText(name).begin,
//            ll->container->directClass->name);
    foreach(dd in container.getDecls())
    {
        if(dd.name == name)
        {
            ioResult.items.append(LookupResultItem(dd));
        }
    }
}

func lookupDirect(
	container: ContainerStmt,
	name: Ptr<Name>)
	-> LookupResult
{
    var result : LookupResult;
    lookupDirectImpl(container, name, &result);
    return result;    
}

func lookupDirect(
	scope: Ptr<Scope>,
	name: Ptr<Name>)
	-> LookupResult
{
    var result : LookupResult;
    for(var ll = &scope.directLink; ll; ll = ll.next)
    {
        lookupDirectImpl(
            ll.container,
            name,
            &result);
    }
    return result;
}

func lookup(
	scope: Ptr<Scope>,
	name: Ptr<Name>)
	-> LookupResult
{
	for(var ss = scope; ss; ss = ss.parent)
	{
        let result = lookupDirect(ss, name);

        // don't look in outer scopes if we found a hit inside...
        if(!result.isEmpty())
            return result;
	}

    return LookupResult();
}
