// source.cog

import cog;

struct SourceLoc
{
	var raw : USize;

	init() { this.raw = 0; }

	init(raw: USize)
	{
		this.raw = raw;
	}
}

struct Dummy {}

struct ExpandedSourceLoc
{
	var file : TerminatedStringSpan;
	var line : Int;
	var column : Int;
}

struct SourceFile
{
	// next file in the list of loaded files
	var next : Ptr<SourceFile>;

	// path to the file
	var path : TerminatedStringSpan;

	// null-terminated source of the file
	var text : TerminatedStringSpan;

	// starting source location for the file
	var firstLoc : SourceLoc;
	var lastLoc : SourceLoc;
}

func getSourceFile(
	session: Session,
	path: TerminatedStringSpan)
	-> Ptr<SourceFile>
{
	// TODO: dedupe files as needed

	// Check that we can open the file for reading
	let file = fopen(path.begin, "rb");
	if(!file)
	{
		// TODO: error message!

		diagnose(&session.sink, SourceLoc(0), kDiagnostic_unimplemented, path);

		return 0;
	}

	// Check the size of the file
	fseek(file, 0, SEEK_END);
	let fileSize = ftell(file);
	fseek(file, 0, SEEK_SET);


	// Allocate storage for file entry,
	// text, and path
	let pathSize = path.end - path.begin;

	let sourceFile = cast<Ptr<SourceFile> >(
		malloc(
		sizeOf<SourceFile>()
		+ pathSize + 1
		+ fileSize + 1));
    let pathData = cast<Ptr<Char> >(sourceFile + 1);
	let fileData = pathData + pathSize + 1;

	memcpy(pathData, path.begin, pathSize);
	pathData[pathSize] = 0;

	fread(fileData, fileSize, 1, file);
    fclose(file);
	fileData[fileSize] = 0;


	sourceFile.path = TerminatedStringSpan(pathData, pathData + pathSize);
	sourceFile.text = TerminatedStringSpan(fileData, fileData + fileSize);
	sourceFile.firstLoc.raw = session.lastSourceLoc + 1;
	sourceFile.lastLoc.raw = sourceFile.firstLoc.raw + fileSize + 1;

	session.lastSourceLoc = sourceFile.lastLoc.raw;

	sourceFile.next = session.sourceFiles;
	session.sourceFiles = sourceFile;

	return sourceFile;
}

func expandLoc(
	session: Session,
	loc: SourceLoc)
	-> ExpandedSourceLoc
{
	var expanded : ExpandedSourceLoc;
	if(loc.raw == 0)
	{
		expanded.file = TerminatedStringSpan("");
		expanded.line = 0;
		expanded.column = 0;
		return expanded;
	}

	// TODO: faster implementaton of all of this

	for(var f = session.sourceFiles; f; f = f.next)
	{
		if(loc.raw < f.firstLoc.raw)
			continue;

		if(loc.raw > f.lastLoc.raw)
			continue;

		var line = 1;
		var column = 1;
		var cursor = f.text.begin;
		let offset = loc.raw - f.firstLoc.raw;
		for(var ii = 0; ii < offset; ++ii)
		{
			let c = *cursor;
			switch(c)
			{
			case '\r': case '\n':
				{
					let d = cursor[1];
					if((c ^ d) == ('\r' ^ '\n'))
					{
                        ii++;
						cursor++;
					}
					line++;
					column = 1;
				}
				break;

			default:
				column++;
				break;
			}
			cursor++;
		}

		expanded.file = f.path;
		expanded.line = line;
		expanded.column = column;
		return expanded;
	}

	// internal error
	cogAssert(false);
	return expanded;
}
