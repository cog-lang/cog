// emit.cog

import cog;

struct EmitContext
{
	var session: Session;
	var stream: FILE*;
	var suppressLineDirective : Int;
}

func getSink(context: EmitContext*) -> DiagnosticSink*
{
    return &context.session.sink;
}

enum DeclEmitMode
{
	kDeclEmitMode_MinimalForward,
	kDeclEmitMode_Forward,
	kDeclEmitMode_Full,
}

func emit(
	context: EmitContext*,
	text: StringSpan)
{
	fwrite(text.begin, 1, text.end - text.begin, context.stream);
}

func emit(
	context: EmitContext*,
	text: Char*)
{
	emit(context, TerminatedStringSpan(text));
}

func emit(
	context: EmitContext*,
	name: Name*)
{
	emit(context, getText(name));
}

func emitType(
	context: EmitContext*,
	type: Exp)
{
    if(!type)
    {
        emit(context, "NullType");
        return;
    }

	emitExp(context, type);
}

func emitVal(
    context: EmitContext*,
    val: Val)
{
    {
        cogAssert(!"unimplemented");
        emit(context, "UnknownVal");        
    }
}

func emitGenericQuals(
	context: EmitContext*,
	decl: Decl)
{
	var pp = decl.parent;
	while (pp)
	{
		let genericParent = as<GenericDecl>(pp);
		if (genericParent)
		{
			emit(context, "template<");
			var first = true;
			foreach(dd in genericParent.getDecls())
			{
				let genericParamDecl = as<GenericParamDecl>(dd);
				if (!genericParamDecl)
					continue;

				if (!first) emit(context, ", ");

				emit(context, "typename ");
				emit(context, genericParamDecl.name);
				first = false;
			}
			emit(context, " > ");
		}

		pp = pp.parent;
	}
}

func emitDeclName(
	context: EmitContext*,
	decl: Decl,
	mode: DeclEmitMode,
	includeModule: Bool)
{
	var parent = decl.parent;

	let genericParent = as<GenericDecl>(parent);
	if (genericParent)
	{
		parent = genericParent.parent;
	}

	let aggTypeDecl = as <AggTypeDecl>(parent);
	if (aggTypeDecl)
	{
		if (mode == kDeclEmitMode_Full)
		{
			emitDeclNameAndGenericArgs(context, parent, mode);
			emit(context, "::");
		}
	}
	else if(let moduleDecl = as<ModuleDecl>(parent))
	{
		if(includeModule)
		{
			emitDeclName(context, parent, mode);
			emit(context, "::");
		}
	}

	let name = decl.name;
	let text = getText(name).begin;
	let c = text[0];
	if ('a' <= c && c <= 'z') {}
	else if ('A' <= c && c <= 'Z') {}
	else if ('_' == c || 0 == c) {}
	else
	{
		emit(context, "operator");
	}
	emit(context, decl.name);
}

func emitDeclName(
	context: EmitContext*,
	decl: Decl,
	mode: DeclEmitMode)
{
	emitDeclName(context, decl, mode, false);
}

func emitDeclNameAndGenericArgs(
	context: EmitContext*,
	decl: Decl,
	mode: DeclEmitMode)
{
	let parent = decl.parent;

	let genericParent = as<GenericDecl>(parent);
	
	emitDeclName(context, decl, mode);

	if(let classDecl = as<ClassDecl>(decl))
	{
		emit(context, "Impl");
	}

	if (genericParent && (mode == kDeclEmitMode_Full))
	{
		emit(context, "<");
		var first = true;
		foreach(dd in genericParent.getDecls())
		{
			let genericParamDecl = as<GenericParamDecl>(dd);
			if (!genericParamDecl)
				continue;

			if (!first) emit(context, ", ");

			emit(context, genericParamDecl.name);
			first = false;
		}
		emit(context, " > ");
	}
}

func emitDeclarator(
	context: EmitContext*,
	type: Exp,
	decl: Decl,
	mode: DeclEmitMode)
{
	emitType(context, type);
	emit(context, " ");

	emitDeclName(context, decl, mode);
}

func emitDeclarator(
	context: EmitContext*,
	type: TypeExp,
	decl: Decl,
	mode: DeclEmitMode)
{
	emitDeclarator(context, type.exp, decl, mode);
}

// Expressions

func emitBinaryExp(
    context: EmitContext*,
    exp: AppExpBase,
    op: Char*)
{
    emitExp(context, exp.args.head.exp);
    emit(context, " ");
    emit(context, op);
    emit(context, " ");
    emitExp(context, exp.args.head.next.exp);
}

func emitStringVal(
    context: EmitContext*,
    str: StringSpan)
{
    var cursor = str.begin;
    while(cursor != str.end)
    {
        switch(*cursor)
        {
        case '\n': emit(context, "\\n"); break;
		case '\r': emit(context, "\\r"); break;
		case '\\': emit(context, "\\\\"); break;
		case '\t': emit(context, "\\t"); break;
		case '\'': emit(context, "\\\'"); break;
		case '\"': emit(context, "\\\""); break;
		default:
            {
//                char text[] = {*cursor, 0};
				var text : FixedSizeArray<2, Char>;
				text[0] = *cursor;
				text[1] = 0;

                emit(context, text);
            }
            break;
        }
        cursor++;
    }
}

func emitStringVal(
    context: EmitContext*,
    str: String)
{
	let strSpan = str.asSpan();
	emitStringVal(context, StringSpan(strSpan.begin, strSpan.end));
}

func emitExp(
    context: EmitContext*,
	exp: Exp)
{
	emitLineDirective(context, exp);

	if (let nameExp = as<NameExp>(exp))
	{
		emit(context, nameExp.name);
	}
	else if (let memberExpr = as<MemberExp>(exp))
	{
		emit(context, "DEREF(");
		emitExp(context, memberExpr.base);
		emit(context, ")");
		emit(context, ".");
		emit(context, memberExpr.memberName);
	}
	else if (let parenExpr = as<ParenExp>(exp))
	{
		emit(context, "(");
		emitExp(context, parenExpr.base);
		emit(context, ")");
	}
	else if (let genericAppExp = as<GenericAppExp>(exp))
	{
		emitExp(context, genericAppExp.base);
		emit(context, "<");
		var first = true;
		foreach(arg in genericAppExp.args)
		{
			if (!first) emit(context, ", ");
			emitExp(context, arg.exp);
			first = false;
		}
		emit(context, "> ");
	}
	else if (let infixExp = as<InfixExp>(exp))
	{
		emitExp(context, infixExp.args.head.exp);
		emit(context, " ");
		emitExp(context, infixExp.base);
		emit(context, " ");
		emitExp(context, infixExp.args.head.next.exp);
	}
	else if (let prefixExp = as<PrefixExp>(exp))
	{
		emitExp(context, prefixExp.base);
		emitExp(context, prefixExp.args.head.exp);
	}
	else if (let postfixExp = as<PostfixExp>(exp))
	{
		emitExp(context, postfixExp.args.head.exp);
		emitExp(context, postfixExp.base);
	}
	else if (let indexExp = as<IndexExp>(exp))
	{
		emitExp(context, indexExp.base);
		emit(context, "[");
		var first = true;
		foreach(arg in indexExp.args)
		{
			if (!first) emit(context, ", ");
			emitExp(context, arg.exp);
			first = false;
		}
		emit(context, "]");
	}
	else if(let appExp = as<AppExpBase>(exp))
    {
        emitExp(context, appExp.base);
        emit(context, "(");
        var first = true;
        foreach(arg in appExp.args)
        {
            if(!first) emit(context, ", ");
            emitExp(context, arg.exp);
            first = false;
        }
        emit(context, ")");
    }
    else if(let assignExp = as<AssignExp>(exp))
    {
        emitExp(context, assignExp.left);
        emit(context, " = ");
        emitExp(context, assignExp.right);
    }
    else if(let intLitExp = as<IntLitExp>(exp))
    {
//        char buffer[16];
		var buffer : FixedSizeArray<16,Char>;
        sprintf(buffer, "%lld", intLitExp.val);
        emit(context, buffer);
    }
    else if(let strLitExp = as<StringLitExp>(exp))
    {
        emit(context, "\"");
        emitStringVal(context, strLitExp.val);
        emit(context, "\"");
    }
    else if(let charLitExp = as<CharacterLitExp>(exp))
    {
        emit(context, "\'");
        emitStringVal(context, charLitExp.val);
        emit(context, "\'");
    }
    else if(let thisExpr = as<ThisExpr>(exp))
    {
        emit(context, "this");
    }
    else if(let castExpr = as<CastExpr>(exp))
    {
        emit(context, "cast<");
		emitType(context, castExpr.toType.exp);
        emit(context, ">(");
		emitExp(context, castExpr.arg);
        emit(context, ")");
    }
    else
    {
        diagnose(getSink(context), exp.loc, kDiagnostic_unimplemented, exp.directClass.name);
        cogAssert(!"unimplemented");
    }
}

// Statements


func emitBlockStmt(
	context: EmitContext*,
	stmt: BlockStmt)
{
	emit(context, "{\n");
	foreach(stmt in stmt.getStmts())
	{
		emitStmt(context, stmt);
	}
	emit(context, "}\n");
}

func emitBlockStmt(
    context: EmitContext*,
	stmt: Stmt)
{
    if(let blockStmt = as<BlockStmt>(stmt))
    {
        emitBlockStmt(context, blockStmt);
    }
    else
    {
        emit(context, "{\n");
        emitStmt(context, stmt);
        emit(context, "}\n");
    }
}

func emit(
	context: EmitContext*,
	value: Int)
{
	var buffer : FixedSizeArray<32,Char>;
	sprintf(buffer, "%lld", Int64(value));
	emit(context, buffer);
}

func emitLineDirective(
	context: EmitContext*,
	syn: Syntax)
{
	if(context.suppressLineDirective > 0)
		return;

	let loc = syn.loc;
	if(!loc.raw)
		return;

	let expandedLoc = expandLoc(context.session, loc);

	// TODO: actually expand and emit the loc!

	emit(context, "\n\n#line ");
	emit(context, expandedLoc.line);
	emit(context, " \"");
	emit(context, expandedLoc.file);
	emit(context, "\"\n");

	// indent as needed for next line
	for(var ii : Int = 0; ii < expandedLoc.column; ++ii)
	{
		emit(context, " ");
	}
}

func emitStmt(
	context: EmitContext*,
	stmt: Stmt)
{
	emitLineDirective(context, stmt);

	if(let blockStmt = as<BlockStmt>(stmt))
	{
		emitBlockStmt(context, blockStmt);
	}
    else if(let exp = as<Exp>(stmt))
    {
        emitExp(context, exp);
        emit(context, ";\n");
    }
    else if(let whileStmt = as<WhileStmt>(stmt))
    {
        emit(context, "while(");
        emitExp(context, whileStmt.condition);
        emit(context, ")\n{\n");
        emitStmt(context, whileStmt.body);
        emit(context, "}\n");
    }
	else if (let forEachStmt = as<ForEachStmt>(stmt))
	{
		emit(context, "for(auto ");
		emit(context, forEachStmt.name);
		emit(context, " : ");
		emitExp(context, forEachStmt.exp);
		emit(context, ")\n{\n");
		emitStmt(context, forEachStmt.body);
		emit(context, "}\n");
	}
	else if (let forStmt = as<ForStmt>(stmt))
	{
		emit(context, "{\n");
		if (forStmt.init)
		{
			emitStmt(context, forStmt.init);
		}
		emit(context, "for(;");
		if (forStmt.condition)
		{
			emitExp(context, forStmt.condition);
		}
		emit(context, ";");
		if (forStmt.iter)
		{
			emitExp(context, forStmt.iter);
		}
		emit(context, ")\n{\n");
		emitStmt(context, forStmt.body);
		emit(context, "}}\n");
	}
	else if (let switchStmt = as<SwitchStmt>(stmt))
	{
		emit(context, "switch(");
		emitExp(context, switchStmt.condition);
		emit(context, ")\n{\n");
		for(var cc = switchStmt.cases; cc; cc = cc.next)
		{
			for (var aa = cc.values; aa; aa = aa.next)
			{
				if (aa.exp)
				{
					emit(context, "case ");
					emitExp(context, aa.exp);
				}
				else
				{
					emit(context, "default");
				}
				emit(context, ":\n");
			}
			emit(context, "{\n");
			emitStmt(context, cc.body);
			emit(context, "}\n");
		}
		emit(context, "}\n");
	}
	else if(let ifStmt = as<IfStmt>(stmt))
    {
        emit(context, "if(");
        emitExp(context, ifStmt.condition);
        emit(context, ")\n");
        emitBlockStmt(context, ifStmt.thenStmt);
        if(let elseStmt = ifStmt.elseStmt)
        {
            emit(context, "else\n");
            emitBlockStmt(context, elseStmt);
        }
    }
	else if(let ifLetStmt = as<IfLetStmt>(stmt))
    {
        emit(context, "if(auto ");
        emit(context, ifLetStmt.name);
        emit(context, " = ");
        emitExp(context, ifLetStmt.init);
        emit(context, ")\n");
        emitBlockStmt(context, ifLetStmt.thenStmt);
        if(let elseStmt = ifLetStmt.elseStmt)
        {
            emit(context, "else\n");
            emitBlockStmt(context, elseStmt);
        }
    }
    else if(let returnStmt = as<ReturnStmt>(stmt))
    {
        emit(context, "return");
        if(let value = returnStmt.value)
        {
            emit(context, " ");
            emitExp(context, value);
        }
        emit(context, ";\n");
    }
    else if(let breakStmt = as<BreakStmt>(stmt))
    {
        emit(context, "break;\n");
    }
    else if(let continueStmt = as<ContinueStmt>(stmt))
    {
        emit(context, "continue;\n");
    }
	else if(let decl = as<Decl>(stmt))
	{
		emitDecl(context, decl, kDeclEmitMode_Full);
	}
    else
    {
        diagnose(getSink(context), stmt.loc, kDiagnostic_unimplemented, stmt.directClass.name);
        cogAssert(!"unimplemented");
    }
}

// Declaration

func emitClassDecl(
	context: EmitContext*,
    aggDecl: ClassDecl,
	mode: DeclEmitMode)
{
	// We need to emit implementations for class members here!
	if (mode == kDeclEmitMode_Full)
	{
		foreach(dd in aggDecl.getDecls())
		{
			if (let varDecl = as<VarDecl>(dd))
				continue;

			emitDecl(context, dd, kDeclEmitMode_Full);
		}

		return;
	}

	emit(context, "using ");
    emit(context, aggDecl.name);
    emit(context, " = struct ");
    emit(context, aggDecl.name);
    emit(context, "Impl* ");
    emit(context, ";\n");

	emit(context, "struct ");
    emit(context, aggDecl.name);
	emit(context, "Impl");

	if (mode <= kDeclEmitMode_MinimalForward)
	{
		emit(context, ";\n");
		return;
	}

    if(let base = aggDecl.base.exp)
	{
		emit(context, " : ");
		emitType(context, base);
		emit(context, "Impl");
	}
	else
	{
		emit(context, " : cog::ObjectImpl");
	}

	emit(context, "\n{\n");

	emit(context, "typedef cog::Class StaticClass;\n");
	emit(context, "static StaticClass staticClass;\n");


    emitDecls(context, aggDecl, kDeclEmitMode_Forward);
	emit(context, "};\n");

	emit(context, "} namespace cog {\n");

	emit(context, "template<> struct ObjectClassImpl<");
	emitDeclName(context, aggDecl, kDeclEmitMode_Full, true);
	emit(context, " > { typedef ");
	emitDeclName(context, aggDecl, kDeclEmitMode_Full, true);
	emit(context, "Impl Impl; };\n");

	emit(context, "} namespace ");
	emit(context, context.session.moduleDecl.name);
	emit(context, " {\n");
}


func emitStructDecl(
	context: EmitContext*,
    aggDecl: StructDecl,
	mode: DeclEmitMode)
{
	// We need to emit implementations for class members here!
	if (mode == kDeclEmitMode_Full)
	{
		foreach(dd in aggDecl.getDecls())
		{
			if (let varDecl = as<VarDecl>(dd))
				continue;

			emitDecl(context, dd, kDeclEmitMode_Full);
		}

		return;
	}

	emit(context, "struct ");
    emit(context, aggDecl.name);

	if (mode <= kDeclEmitMode_MinimalForward)
	{
		emit(context, ";\n");
		return;
	}

    if(let base = aggDecl.base.exp)
	{
		emit(context, " : ");
		emitType(context, base);
	}

	emit(context, "\n{\n");

	emit(context, "typedef cog::Class StaticClass;\n");
	emit(context, "static StaticClass staticClass;\n");


    emitDecls(context, aggDecl, kDeclEmitMode_Forward);
	emit(context, "};\n");
}

func emitVarDecl(
	context: EmitContext*,
	varDecl: VarDeclBase,
	mode: DeclEmitMode)
{
	if (mode == kDeclEmitMode_MinimalForward)
		return;

	if (let type = varDecl.type.exp)
	{
		emitDeclarator(context, type, varDecl, mode);
	}
	else
	{
		emit(context, "auto ");
		emitDeclName(context, varDecl, mode);
	}
    if(let initExp = varDecl.init)
    {
        emit(context, " = ");
        emitExp(context, initExp);
    }
	emit(context, ";\n");
}

func emitParamDecl(
	context: EmitContext*,
	paramDecl: ParamDecl)
{
	emitDeclarator(context, paramDecl.type, paramDecl, kDeclEmitMode_Full);
}

func emitFuncDecl(
	context: EmitContext*,
	funcDecl: FuncDecl,
	mode: DeclEmitMode)
{
	if (mode == kDeclEmitMode_MinimalForward)
		return;

	if (mode == kDeclEmitMode_Full)
	{
		if (!funcDecl.body)
			return;

		emitGenericQuals(context, funcDecl);
	}

	if (let resultType = funcDecl.resultType.exp)
	{
		emitDeclarator(context, resultType, funcDecl, mode);
	}
	else
	{
		emit(context, "void ");
		emitDeclName(context, funcDecl, mode);
	}

	emit(context, "(");

	var first = true;
	foreach( decl in funcDecl.getDecls())
	{
		let param = as<ParamDecl>(decl);
		if(!param) continue;

		if(!first) emit(context, ", ");
		emitParamDecl(context, param);
		first = false;
	}

	emit(context, ")");

	let body = funcDecl.body;
	if(body && mode == kDeclEmitMode_Full)
	{
        emit(context, "\n");
		emitBlockStmt(context, body);
	}
	else
	{
		emit(context, ";\n");		
	}
}

func emitInitializerDecl(
    context: EmitContext*,
    initDecl: InitializerDecl,
	mode: DeclEmitMode)
{
	if (mode == kDeclEmitMode_MinimalForward)
		return;

	if (mode == kDeclEmitMode_Full)
	{
		if (!initDecl.body)
			return;

		emitGenericQuals(context, initDecl);
	}

    // We emit an initializer as a C++ constructor (for now),
    // so we need to emit hte name of the enclosing type...
	if (mode == kDeclEmitMode_Full)
	{
		emitDeclNameAndGenericArgs(context, initDecl.getParent(), mode);
		emit(context, "::");
	}
    emit(context, initDecl.getParent().name);

    if(as<ClassDecl>(initDecl.getParent()))
    {
    	emit(context, "Impl");
    }

    emit(context, "(");

    var first = true;
    foreach( decl in initDecl.getDecls())
    {
        let param = as<ParamDecl>(decl);
        if(!param) continue;

        if(!first) emit(context, ", ");
        emitParamDecl(context, param);
        first = false;
    }

    emit(context, ")");

	let body = initDecl.body;
	if (body && mode == kDeclEmitMode_Full)
	{
		emit(context, "\n");
		emitBlockStmt(context, body);
	}
	else
	{
		emit(context, ";\n");
	}
}

func emitSubscriptDecl(
	context: EmitContext*,
	decl: SubscriptDecl,
	mode: DeclEmitMode)
{
	if (mode == kDeclEmitMode_MinimalForward)
		return;

	if (mode == kDeclEmitMode_Full)
	{
		if (!decl.body)
			return;

		emitGenericQuals(context, decl);
	}

	if (let resultType = decl.resultType.exp)
	{
		emitType(context, resultType);
		emit(context, " ");
	}
	else
	{
		emit(context, "void ");
	}

	// We emit an initializer as a C++ constructor (for now),
	// so we need to emit hte name of the enclosing type...
	if (mode == kDeclEmitMode_Full)
	{
		emitDeclNameAndGenericArgs(context, decl.getParent(), mode);
		emit(context, "::");
	}

	emit(context, "operator[](");

	var first = true;
	foreach(decl in decl.getDecls())
	{
		let param = as<ParamDecl>(decl);
		if (!param) continue;

		if (!first) emit(context, ", ");
		emitParamDecl(context, param);
		first = false;
	}

	emit(context, ")");

	let body = decl.body;
	if (body && mode == kDeclEmitMode_Full)
	{
		emit(context, "\n");
		emitBlockStmt(context, body);
	}
	else
	{
		emit(context, ";\n");
	}
}

func emitDecl(
	context: EmitContext*,
	decl: Decl,
	mode: DeclEmitMode)
{
	let builtinAttr = decl.findAttr<BuiltinAttr>();
    if( builtinAttr )
    {
        // Don't emit declarations for builtin stuff!
        return;
    }

	emitLineDirective(context, decl);

	if(let classDecl = as<ClassDecl>(decl))
	{
		emitClassDecl(context, classDecl, mode);
	}
    else if(let structDecl = as<StructDecl>(decl))
    {
		emitStructDecl(context, structDecl, mode);
    }
	// Note: this one comes before the base case for variables...
	else if (let tagDecl = as<EnumTagDecl>(decl))
	{
		emit(context, tagDecl.name);
		if (tagDecl.init)
		{
			emit(context, " = ");
			emitExp(context, tagDecl.init);
		}
		emit(context, ",\n");
	}
	else if(let varDecl = as<VarDeclBase>(decl))
	{
		emitVarDecl(context, varDecl, mode);
	}
	else if(let funcDecl = as<FuncDecl>(decl))
	{
		emitFuncDecl(context, funcDecl, mode);
	}
    else if(let initDecl = as<InitializerDecl>(decl))
    {
		emitInitializerDecl(context, initDecl, mode);
    }
	else if (let subscriptDecl = as<SubscriptDecl>(decl))
	{
		emitSubscriptDecl(context, subscriptDecl, mode);
	}
	else if (let enumDecl = as<EnumDecl>(decl))
	{
		if (mode >= kDeclEmitMode_Full)
			return;

		emit(context, "enum ");
		emitDeclName(context, enumDecl, mode);
		emit(context, " : int");

		if (mode <= kDeclEmitMode_MinimalForward)
		{
			emit(context, ";\n");
			return;
		}

		emit(context, "\n{\n");
		foreach(dd in enumDecl.getDecls())
		{
			emitDecl(context, dd, kDeclEmitMode_Full);
		}
		emit(context, "};\n");
	}
	else if(let importDecl = as<ImportDecl>(decl))
	{ }
	else if (let typeAliasDecl = as<TypeAliasDecl>(decl))
	{
		emit(context, "typedef ");
		emitDeclarator(context, typeAliasDecl.init, typeAliasDecl, mode);
		emit(context, ";\n");
	}
	else if (let genericDecl = as<GenericDecl>(decl))
	{
//		if (mode < kDeclEmitMode_Full)
//			return;

		if (mode < kDeclEmitMode_Full)
		{
			let innerDecl = genericDecl.inner;

			// DOn't emit spurious `template`...
			if (mode <= kDeclEmitMode_MinimalForward)
			{
				if (as<FuncDeclBase>(innerDecl))
					return;
			}

			emit(context, "template<");
			var first = true;
			foreach(dd in genericDecl.getDecls())
			{
				if (let typeParam = as<GenericParamDecl>(dd))
				{
					if (!first) emit(context, ", ");
					emit(context, "typename ");
					emit(context, typeParam.name);
					first = false;
				}
				else
				{
				}
			}
			emit(context, " >\n");
		}
		emitDecl(context, genericDecl.inner, mode);
	}
	else
	{
		cogAssert(!"unimplemented");
//		throw 99;
	}
}

func emitDecls(
	context: EmitContext*,
	containerDecl: ContainerDecl,
	mode: DeclEmitMode)
{
	foreach(decl in containerDecl.getDecls())
	{
		emitDecl(context, decl, mode);
	}
}

struct DeclSortContext
{
	var sortedDecls: SyntaxListBuilder<Decl>;
	var unsortedDecls: Decl;
}

func addDecl(
	context: DeclSortContext*,
	decl: Decl)
{
	decl.next = nullptr;
	context.sortedDecls.add(decl);
}

func addDecl(
	context: DeclSortContext*,
	declPtr: Decl*)
{
	let decl = *declPtr;
	*declPtr = cast<Decl>(decl.next);
	decl.next = nullptr;

	context.sortedDecls.add(decl);
}

func addDependencies(
	context: DeclSortContext*,
	decl: Decl);


func addDependencies(
	context: DeclSortContext*,
	name: Name*)
{
	cogAssert(name);

	// Split remaining declarations into two lists:
	// 1) Declarations that match the desired name
	// 2) All other declarations
	//
	// Then add any dependencies of each declaration
	// that had a name match, before moving on to add it.
	var dd = context.unsortedDecls;

	var matchingDecls : Decl = nullptr;
	var matchingDeclLink = &matchingDecls;

	var unsortedDeclLink = &context.unsortedDecls;
	context.unsortedDecls = nullptr;

	while (dd)
	{
		let next = cast<Decl>(dd.next);
		dd.next = nullptr;

		if (dd.name == name)
		{
			*matchingDeclLink = dd;
			matchingDeclLink = cast<Ptr<Decl> >(&dd.next);
		}
		else
		{
			*unsortedDeclLink = dd;
			unsortedDeclLink = cast<Ptr<Decl> >(&dd.next);
		}

		dd = next;
	}

	// cap off that lists...
	*matchingDeclLink = nullptr;
	*unsortedDeclLink = nullptr;

	// Now for each of those decls that matched, process it

	dd = matchingDecls;
	while (dd)
	{
		let next = cast<Decl>(dd.next);
		dd.next = nullptr;

		addDependencies(context, dd);
		addDecl(context, dd);

		dd = next;
	}
}

func addDependencies(
	context: DeclSortContext*,
	exp: Exp)
{
	if (!exp) return;

	// HACK to avoid dependencies through pointer types...
	if (let genericAppExpr = as<GenericAppExp>(exp))
	{
		if (let nameExpr = as<NameExp>(genericAppExpr.base))
		{
			if (strcmp("Ptr", getText(nameExpr.name).begin) == 0)
				return;
			if (strcmp("ConstPtr", getText(nameExpr.name).begin) == 0)
				return;
		}
	}

	if (let nameExp = as<NameExp>(exp))
	{
		addDependencies(context, nameExp.name);
	}
	else if (let appExp = as<AppExpBase>(exp))
	{
		addDependencies(context, appExp.base);
		foreach(aa in appExp.args)
			addDependencies(context, aa.exp);
	}
}

func addDependencies(
	context: DeclSortContext*,
	typeExp: TypeExp)
{
	addDependencies(context, typeExp.exp);
}

func addDependencies(
	context: DeclSortContext*,
	decl: Decl)
{
	// Try to find what this decl depends on, and add them!
	if (let varDecl = as<VarDeclBase>(decl))
	{
		addDependencies(context, varDecl.type);
	}
	else if (let funcDecl = as<FuncDeclBase>(decl))
	{
		addDependencies(context, funcDecl.resultType);
		foreach(dd in funcDecl.getDecls())
		{
			addDependencies(context, dd);
		}
	}
	else if (let aggTypeDecl = as<AggTypeDecl>(decl))
	{
		addDependencies(context, aggTypeDecl.base);
		foreach(dd in aggTypeDecl.getDecls())
		{
			addDependencies(context, dd);
		}
	}

}

func sortDecls(
	context: EmitContext*,
	container: ContainerDecl)
{
	var sortContext : DeclSortContext;
	sortContext.unsortedDecls = container.getDecls().head;

	while (sortContext.unsortedDecls)
	{
		let decl = sortContext.unsortedDecls;
		sortContext.unsortedDecls = cast<Decl>(decl.next);
		decl.next = nullptr;

		// add dependent decls!!
		addDependencies(&sortContext, decl);

		addDecl(&sortContext, &decl);
	}
}

func emitModuleInner(
	session: 		Session,
	moduleNameText:	TerminatedStringSpan,
	outputPath: 	Ptr<Char>,
	extra:			Ptr<Char>)
{
	let moduleDecl = session.moduleDecl;

	let stream = fopen(outputPath, "wb");

//	EmitContext context = { session, stream };
	var context : EmitContext;
	context.session = session;
	context.stream = stream;
	context.suppressLineDirective = 0;

	emit(&context, "#include \"runtime/runtime.h\"\n");

    for(var mm = session.loadedModules; mm; mm = cast<ModuleDecl>(mm.next))
    {
        if(mm == moduleDecl) continue;

		sortDecls(&context, mm);

//        fprintf(stderr, "module %p : %s\n", mm, getText(mm.name).begin);
    emit(&context, "namespace ");
    emit(&context, mm.name);
    emit(&context, " {\n");
	emitDecls(&context, mm, kDeclEmitMode_MinimalForward);
	emitDecls(&context, mm, kDeclEmitMode_Forward);
    emit(&context, "}\n");
    }

//        fprintf(stderr, "module %p : %s\n", moduleDecl, getText(moduleDecl.name).begin);

	sortDecls(&context, moduleDecl);

    emit(&context, "namespace ");
    emit(&context, moduleNameText);
    emit(&context, " {\n");
	emitDecls(&context, moduleDecl, kDeclEmitMode_MinimalForward);
	emitDecls(&context, moduleDecl, kDeclEmitMode_Forward);
	emitDecls(&context, moduleDecl, kDeclEmitMode_Full);

	// last pass to emit info for classes, I guess
	foreach(dd in moduleDecl.getDecls())
	{
		let classDecl = as<ClassDecl>(dd);
		if (!classDecl) continue;

		context.suppressLineDirective += 1;

		emit(&context, "COG_DEFINE_CLASS(");
		emitDeclName(&context, classDecl, kDeclEmitMode_Full);
		emit(&context, ", ");
		if (let base = classDecl.base.exp)
		{
			emitExp(&context, base);
		}
		else
		{
			emit(&context, "cog::Object");
		}
		emit(&context, ")\n");

		context.suppressLineDirective -= 1;
	}

	emit(&context, "}\n");

	if(extra)
	{
		emit(&context, TerminatedStringSpan(extra));
	}

	fclose(stream);	
}


func emitModule(
	session: Session)
{
    if(!session.sourceFiles)
        return;
    if(!session.moduleDecl)
        return;

	// compute a resonable module name
	let moduleDecl = session.moduleDecl;
	let moduleName = moduleDecl.name;
    cogAssert(moduleName);

    let modulePath = session.modulePath2;
    cogAssert(modulePath);

	let moduleNameText = getText(moduleName);
    let modulePathText = getText(modulePath);

	// TODO: actually compute a reasonable path

//	char buffer[1024];
	var buffer : FixedSizeArray<1024, Char>;
	sprintf(buffer, "%s.cog.cpp", modulePathText.begin);

	emitModuleInner(
		session,
		moduleNameText,
		buffer,
		nullptr);
}