// token.cog

import cog;

typealias TokenFlags = UInt16;

enum TokenFlag : TokenFlags
{
	kTokenFlag_AtStartOfLine 	= 1 << 0,
	kTokenFlag_AfterSpace 		= 1 << 1,
}


enum TokenCode : int16_t
{
/*
#define TOKEN(name, desc) kTokenCode_##name,
#include "thtokendefs.h"
*/
	kTokenCode_Invalid,
	kTokenCode_EndOfFile,
	kTokenCode_Identifier,
	kTokenCode_InfixOperator,
	kTokenCode_PrefixOperator,
	kTokenCode_PostfixOperator,
	kTokenCode_LineComment,
	kTokenCode_BlockComment,
	kTokenCode_WhiteSpace,
	kTokenCode_EndOfLine,
	kTokenCode_IntegerLiteral,
	kTokenCode_FloatingPointLiteral,
	kTokenCode_StringLiteral,
	kTokenCode_CharacterLiteral,
kTokenCode_LSquare,
kTokenCode_RSquare,
kTokenCode_Assign,
kTokenCode_Arrow,
kTokenCode_LParen,
kTokenCode_RParen,

kTokenCode_LCurly,
kTokenCode_RCurly,
kTokenCode_Semi,
kTokenCode_Colon,
kTokenCode_Comma,
kTokenCode_Dot,




}

struct Token
{
	var rawLoc : UInt;
	var rawSize : UInt;
	var rawData : Ptr<Void>;
	var code : TokenCode;
	var flags : TokenFlags;
	var advance : UInt32;

	func getLoc() -> SourceLoc
	{
		return SourceLoc(rawLoc);
	}
}

struct TokenSpan
{
	var begin_ : ConstPtr<Token>;
	var end_ : ConstPtr<Token>;

	init()
	{
		this.begin_ = null;
		this.end_ = null;
	}

	init(begin: ConstPtr<Token>, end: ConstPtr<Token>)
	{
		this.begin_ = begin;
		this.end_ = end;
	}
}
