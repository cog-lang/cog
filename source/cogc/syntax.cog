// syntax.cog

import cog;

struct TypeExp
{
	var exp : Exp = null;
	var type : Type = null;

	/*
	operator Exp*()
	{
		return exp;
	}
	*/
}

func asBool(typeExp: TypeExp) -> Bool
{
	return typeExp.exp;
}

struct FilteredArrayIter<T,U>
{
	var current : T*;
	var end : U*;

	init(current: U*, end: U*)
	{
		this.end = end;
		this.current = adjust(current);
	}

	func !=(other: FilteredArrayIter<T,U>) -> Bool
	{
        return current != other.current;
	}

    func *() -> T { return *current; }

	func ++()
    {
        current = adjust(cast<Ptr<U> >(current + 1));
    }

	func adjust(obj: U*) -> T*
	{
		while(obj != end)
		{
			let t = as<T>(*obj);
			if(t)
				return cast<Ptr<T> >(obj);
			obj = obj + 1;
		}
		return cast<Ptr<T> >(end);
	}

}


struct FilteredArray<T,U>
{
	var beginPtr : U*;
	var endPtr : U*;


	func begin() -> FilteredArrayIter<T,U>
	{
		return FilteredArrayIter<T,U>(beginPtr, endPtr);
	}

	func end() -> FilteredArrayIter<T,U>
	{
		return FilteredArrayIter<T,U>(endPtr, endPtr);
	}

	init()
	{
		this.beginPtr = null;
		this.endPtr = null;
	}

	init(beginPtr: U*, endPtr: U*)
	{
		this.beginPtr = beginPtr;
		this.endPtr = endPtr;
	}

	init(list: ConstRef<Array<U> >)
	{
		this.beginPtr = list.begin();
		this.endPtr = list.end();
	}
}

class Syntax
{
	var loc : SourceLoc;
}

class Attr : Syntax
{
}

class BuiltinAttr : Attr
{
	var name : Ptr<Name>;
}

class DeclRefClassAttr : Attr
{
	var syntaxClass : Ptr<Class>;
}

class Stmt : Syntax
{
	var attrs : Array<Attr>;

	func findAttrImpl(attrClass: Ptr<Class>) -> Attr
	{
		foreach(a in attrs)
		{
			// TODO: support `if let`
			let match = as(a, attrClass);
			if(match)
				return cast<Attr>(match);
		}
		return null;
	}

	func findAttr<T>() -> T
	{
		return cast<T>(findAttrImpl(getClass<T>()));
	}
}

enum DeclCheckState
{
	// Really this represents the phases of checking
	// that a declaration can go through, and we need
	// to ensure that every declaration goes through
	// all of them.

	kDeclCheckPhase_Initial = 0, // Nothing has been done.
	kDeclCheckPhase_PreCheckHead, // look at the "head" and figure out what needs to be prepared
	kDeclCheckPhase_CheckHead, // actually validate the "head" so that other decls can reference us

	kDeclCheckPhase_PreCheckBody, // look at the body and figure out what is needed
	kDeclCheckPhase_CheckBody, // actually validate the body
}

class Decl : Stmt
{
	var name : Ptr<Name>;
	var parent : ContainerStmt;
	var checkState : DeclCheckState = kDeclCheckPhase_Initial;

	func getParent() -> ContainerStmt
	{
		return parent;
	}
}

class SpecializationArg : Object
{
	var param : Decl;
	var value : Val;
}

class Specializations : Object
{
	var genericDeclRef : DeclRefValImpl<GenericDecl>;
	var args : Array<SpecializationArg>;
}


class SpecializedDecl : Object
{
	var decl : Decl;
	var specializations: Specializations;
}

struct DeclRefVal
{
	var decl : Decl;
	var specializations : Specializations;

	init()
	{
		this.decl = null;
		this.specializations = null;
	}

	init(decl: Decl)
	{
		this.decl = decl;
		this.specializations = null;
	}

	init(
		decl: Decl,
		specializations: Specializations)
	{
		this.decl = decl;
		this.specializations = specializations;
	}

	init(
		declRef: CompactDeclRef)
	{
		let value = declRef.value;
		if(let specializedDecl = as<SpecializedDecl>(value))
		{
			this.decl = specializedDecl.decl;
			this.specializations = specializedDecl.specializations;
		}
		else
		{
			let declVal = as<Decl>(value);
			this.decl = declVal;
			this.specializations = null;
		}
	}

	func getDecl() -> Decl { return decl; }
	func getSpecializations()
		-> Specializations
	{
		return specializations;
	}
}

struct DeclRefValImpl<T> : DeclRefVal
{
	init()
	{}

	init(
		decl: T,
		specializations: Specializations)
	{
		this.decl = decl;
		this.specializations = specializations;
	}

	init<U>(
		other: DeclRefValImpl<U>,
		t: T = U(null))
	{
		this.decl = other.decl;
		this.specializations = other.specializations;
	}

	func getDecl() -> T
	{
		return cast<T>(decl);
	}
}

struct CompactDeclRef
{
	var value : Object;

	init(decl : Decl)
	{
		this.value = decl;
	}

	init(specialized: SpecializedDecl)
	{
		this.value = specialized;
	}

	init(declRef: DeclRefVal)
	{
		let specializations = declRef.specializations;
		if(!specializations)
		{
			this.value = declRef.decl;
		}
		else
		{
			let specializedDecl = createObject<SpecializedDecl>();
			specializedDecl.decl = declRef.decl;
			specializedDecl.specializations = declRef.specializations;
			this.value = specializedDecl;
		}
	}


	func getDecl()
		-> Decl
	{
		return DeclRefVal(*this).decl;
	}

	func getSpecializations()
		-> Specializations
	{
		return DeclRefVal(*this).specializations;
	}
}

func as<T>(declRef: DeclRefVal)
	-> DeclRefValImpl<T>
{
	return DeclRefValImpl<T>(
		as<T>(declRef.decl),
		declRef.specializations);
}

func as<T>(declRef: CompactDeclRef)
	-> DeclRefValImpl<T>
{
	return as<T>(DeclRefVal(declRef));
}


// Values

// A value is a literal, and thus not syntax
// the intention is that values are hashed so
// that we can compare them with pointer equality
class Val : Object
{
}

class ContainerStmt : Decl
{
	var stmts : Array<Stmt>;

	func getStmts() -> Array<Stmt>
	{
		return stmts;
	}

	func getDecls() -> FilteredArray<Decl, Stmt>
	{
		return FilteredArray<Decl, Stmt>(stmts);
	}
}

class ContainerDecl : ContainerStmt
{
	// TODO: this used to be by-reference, and that is probably counted on somewhere

	func getDecls() -> Ref<Array<Decl> > { return *cast<Ptr<Array<Decl> > >(&stmts); }
}

struct DeclRefListIterator<T>
{
	var current : Decl*;
	var end : Decl*;
	var specializations : Specializations;

	init(
		current : Decl*,
		end : Decl*,
		specializations: Specializations)
	{
		this.current = current;
		this.end = end;
		this.specializations = specializations;

		adjust();
	}

	func ++()
	{
		if(current == end)
			return;
		current = current + 1;
		adjust();
	}

	func *() -> DeclRefValImpl<T>
	{
		return DeclRefValImpl<T>(
			cast<T>(*current),
			specializations);
	}

	func adjust()
	{
		while(current != end)
		{
			let declAsT = as<T>(*current);
			if(declAsT)
				return;

			current = current + 1;
		}
	}
}

struct DeclRefList<T>
{
	var decls : Array<Decl>;
	var specializations : Specializations;

	func begin() -> DeclRefListIterator<T>
	{
		return DeclRefListIterator<T>(decls.begin(), decls.end(), specializations);
	}

	func end() -> DeclRefListIterator<T>
	{
		return DeclRefListIterator<T>(decls.end(), decls.end(), specializations);
	}

	init()
	{
		this.decls = Array<Decl>();
		this.specializations = null;
	}

	init(decls: Array<Decl>, specializations: Specializations)
	{
		this.decls = decls;
		this.specializations = specializations;
	}
}

func != <T>(
	left: DeclRefListIterator<T>,
	right: DeclRefListIterator<T>) -> Bool
{
	return left.current != right.current;
}

func getDecls(container: DeclRefValImpl<ContainerDecl>)
	-> DeclRefList<Decl>
{
	return DeclRefList<Decl>(
		container.getDecl().getDecls(),
		container.specializations);
}

class GenericDecl : ContainerDecl
{
	var inner : Decl;
}

func getInner(declRef: DeclRefValImpl<GenericDecl>)
	-> DeclRefVal
{
	return DeclRefVal(
		declRef.getDecl().inner,
		declRef.specializations);
}

class TypeVarDecl : Decl
{
	var bound : TypeExp;
	var init : TypeExp;
}

class ImportDecl : Decl
{
	// The scope to extend
	var scope : Ptr<Scope>;

	var name : Ptr<Name>;
}

class GenericParamDecl : TypeVarDecl
{
}

func getBoundType(
	declRef: DeclRefValImpl<GenericParamDecl>)
	-> Type
{
	return specializeType(
		declRef.getDecl().bound.type,
		declRef.specializations);
}

class TypeAliasDecl : TypeVarDecl
{
}

class ModuleDecl : ContainerDecl
{
}

class PatternDecl : ContainerDecl
{
}

class AggTypeDecl : PatternDecl
{
	var base : TypeExp;
}

class ClassDecl : AggTypeDecl
{
}

class StructDecl : AggTypeDecl
{
}

class FuncDeclBase : PatternDecl
{
	var resultType : TypeExp;
	var body : Stmt;
}

func getResultType(
	declRef: DeclRefValImpl<FuncDeclBase>)
	-> Type
{
	return specializeType(
		declRef.getDecl().resultType.type,
		declRef.specializations);
}

class FuncDecl : FuncDeclBase
{
}

class SubscriptDecl : FuncDeclBase
{
}

class InitializerDecl : FuncDeclBase
{
}

class VarDeclBase : Decl
{
	var type : TypeExp;
	var init : Exp;
}

func getType(declRef: DeclRefValImpl<VarDeclBase>) -> Type
{
	return specializeType(
		declRef.getDecl().type.type,
		declRef.specializations);
}

class VarDecl : VarDeclBase
{
}

class LetDecl : VarDeclBase
{
}

class ParamDecl : LetDecl
{
}

class SyntaxDecl : Decl
{
	var syntaxClass : Ptr<Class>;
	var callback : SyntaxCallback;
}

// Statements

class IfStmtBase : Stmt
{
	var thenStmt : Stmt;
	var elseStmt : Stmt;
}


class IfStmt : IfStmtBase
{
	var condition : Exp;
}

class IfLetStmt : IfStmtBase
{
	var name : Name*;
	var init : Exp;
}


class WhileStmt : Stmt
{
	var condition : Exp;
	var body : Stmt;
}

class ForStmt : ContainerStmt
{
	var init : Stmt;
	var condition : Exp;
	var iter : Exp;
	var body : Stmt;
}

class ReturnStmt : Stmt
{
	var value : Exp;
}

class BreakStmt : Stmt
{
}

class ContinueStmt : Stmt
{
}

class SwitchCase : Syntax
{
	var values : Array<Arg>;
	var body : Stmt;
}

class SwitchStmt : Stmt
{
	var condition : Exp;
	var cases : Array<SwitchCase>;
}

// Arguments

class Arg : Syntax
{
	var exp : Exp;
}

class PositionalArg : Arg
{
}


// expressions

class Exp : Stmt
{
	var type : Type;
}

class LitExp : Exp
{
}

typealias IntLitVal = Int64;

class IntLitExp : LitExp
{
	var val : IntLitVal;
}

class StringLitExp : LitExp
{
	var val : String;
}

class CharacterLitExp : LitExp
{
	var val : String;
}


class AppExpBase : Exp
{
	var base : Exp;
	var args : Array<Arg>;
}

class GenericAppExp : AppExpBase
{
}

class AppExp : AppExpBase
{
}

class IndexExp : AppExpBase
{
}

class OperatorAppExp : AppExp
{
}

class InfixExp : OperatorAppExp
{
}

class PrefixExp : OperatorAppExp
{
}

class PostfixExp : OperatorAppExp
{
}

class AssignExp : Exp
{
	var left : Exp;
	var right : Exp;
}

class DeclRefExp : Exp
{
	var declRef : CompactDeclRef;
}

class NameExp : DeclRefExp
{
	var name : Ptr<Name>;
	var scope : Ptr<Scope>;
}


class MemberExp : DeclRefExp
{
	var base : Exp;
	var memberName : Ptr<Name>;
}

class ErrorExp : Exp
{
}

struct LookupResultItem
{
	// TODO: should be a declref
	var decl : Decl;

	init()
	{
		this.decl = null;
	}

//    LookupResultItem(
//        LookupResultItem const& other) = default;

	init(decl: Decl)
	{
		this.decl = decl;
	}
}

struct LookupResult
{
	var items : Array<LookupResultItem>;

	func begin() -> Ptr<LookupResultItem> { return items.begin(); }
	func end() -> Ptr<LookupResultItem> { return items.end(); }


	func isEmpty() -> Bool { return items.getCount() == 0; }
    func isUnique() -> Bool { return items.getCount() == 1; }
    func isOverloaded() -> Bool { return items.getCount() > 1; }

    func getDecl() -> Decl
    {
        cogAssert(isUnique());
        return items[0].decl;
    }

//    func filterImpl(Class* _class);

//	func filter<T>()
//	{
//		filterImpl(getClass<T>());
//	}
}


class OverloadedExpr : Exp
{
	var lookupResult : LookupResult;
	var base : Exp;
}

// Statements

class BlockStmt : ContainerDecl
{
}

// Type Expressions
//
// A type expressions is a piece of syntax that
// evaluates to a type in context.

class TypeExpr : Exp
{
}

class PtrTypeExpr : TypeExpr
{
	var base : Exp;
}

// A function type expression `A -> B`
class FuncTypeExpr : TypeExpr
{
	var params : Exp;
	var result : Exp;
}

// Types

// A type is a value, since it is immutable
class Type : Val
{
}

// A type that is formed via a declaration reference
class DeclRefType : Type
{
	var declRef : CompactDeclRef;
}

// The custom type used to represent `Void`
class VoidType : DeclRefType {}

// The custom type used to represent `Null`
class NullType : DeclRefType {}

// An instantiation of the `Ptr<>` generic
class PtrType : DeclRefType {}


// A reference to a `class` decl
class ClassType : DeclRefType {}


// The "type" of another type
class TypeType : Type
{
	var type : Type;
}

// the type of a function
class FuncType : Type
{
    // TODO: domain/range types here
}

// The tyep of an errorneous term
class ErrorType : Type
{
}

// The type of a reference to an overload group
class OverloadGroupType : Type
{
}


// HACK: TODO: fill these in

class EnumDecl : AggTypeDecl
{}

class EnumTagDecl : VarDeclBase
{}

class ForEachStmt : ContainerStmt
{
	var varDecl : VarDeclBase;
	var exp: Exp;
	var body: Stmt;
}

class ParenExp : Exp
{
	var base: Exp;
}

//

class ThisExpr : Exp
{
	var scope : Scope*;
}

class CastExpr : Exp
{
	var toType : TypeExp;
	var arg : Exp;
}

class NullLitExpr : Exp
{
}


