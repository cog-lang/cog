//import cog;


class Session
{
	var sourceFiles : Ptr<SourceFile>;
	var names : Ptr<Name>;
	var lastSourceLoc : USize;
	var sink : DiagnosticSink;
	var moduleDecl : Ptr<ModuleDecl>;
	var moduleDeclLink : Ptr<Ptr<Decl> >;

	var moduleName2 : Ptr<Name>;
	var modulePath2 : Ptr<Name>;

	var loadedModules : Ptr<ModuleDecl>;

	// Should we evaluate rather than compile?
	var eval : Bool;
}

func createSession() -> Ptr<Session>
{
	let session = createObject<Session>();
	session.sink.session = session;
	return session;
}

func destroySession(session: Ptr<Session>)
{
	free(session);
}

func setModulePath(
	session: Ptr<Session>,
	path:		StringSpan)
{
	session.modulePath2 = getName(session, path);

	var name = path;
	name = name.suffixAfterLast('/');
	name = name.suffixAfterLast('\\');
	session.moduleName2 = getName(session, name);
}

func setModulePath(
	session: Ptr<Session>,
	path: TerminatedStringSpan)
{
	setModulePath(session, StringSpan(path));
}

func getModulePath(
	session: Ptr<Session>)
	-> Ptr<Name>
{
	return session.modulePath2;
}

func getModuleName(
	session: Ptr<Session>)
	-> Ptr<Name>
{
	return session.moduleName2;
}

func setEvaluate(
	session: Ptr<Session>)
{
	session.eval = true;
}

func loadSourceFile(
	session: Ptr<Session>,
	path: TerminatedStringSpan)
{
	let file = getSourceFile(session, path);
	if(!file) return;

	parseFile(session, file);
}

func getErrorCount(
	session: Ptr<Session>)
	-> Int
{
    return session.sink.errorCount;
}
