// diagnostic.cog

import cog;

enum Severity
{
	kSeverity_Note,
	kSeverity_Warning,
	kSeverity_Error,
	kSeverity_Fatal,
}

enum DiagnosticID
{
/*
#define DIAGNOSTIC(severity, id, msg) \
	kDiagnostic_##id,
#include "thdiagnosticdefs.h"
*/
	kDiagnostic_unimplemented,
	kDiagnostic_unexpectedCharacter,
	kDiagnostic_unexpectedToken,
	kDiagnostic_unexpectedTokenExpectedToken,
	kDiagnostic_youMeanDot,
	kDiagnostic_unexpectedDeclName,
	kDiagnostic_undefinedIdentifier,
	kDiagnostic_noMemberOfNameInType,
	kDiagnostic_failedToFindBuiltinType,
	kDiagnostic_cannotConvertType,
	kDiagnostic_noOverloadCandidatesFound,
	kDiagnostic_candidate,
	kDiagnostic_ambiguousCallToOverload,
	kDiagnostic_noApplicableOverloadForCall,
	kDiagnostic_tooFewArgs,
	kDiagnostic_tooManyArgs,
}

struct DiagnosticSink
{
	var session : Session;
	var errorCount : Int;
}

struct ArgTypeList
{
	var args : Arg;

	init()
	{
		this.args = nullptr;
	}

	init(args: Arg)
	{
		this.args = args;
	}
}

enum DiagnosticArgFlavor
{
	kFlavor_Int,
	kFlavor_TokenCode,
	kFlavor_Name,
	kFlavor_StringSpan,
	kFlavor_Type,
	kFlavor_DeclRef,
	kFlavor_ArgTypeList,
}

struct DiagnosticArg
{
	init(val: Int)
	{
		this.flavor = kFlavor_Int;
		this.intVal = val;
	}

	init(val: TokenCode)
	{
		this.flavor = kFlavor_TokenCode;
		this.tokenCodeVal = val;
	}

	init(val: Ptr<Name>)
	{
		this.flavor = kFlavor_Name;
		this.nameVal = val;
	}

	init(val: StringSpan)
	{
		this.flavor = kFlavor_StringSpan;
		this.stringSpanVal = val;
	}

//	init(val: TerminatedStringSpan) { this.stringSpanVal = val; }

	init(val: ConstPtr<Char>)
	{
		this.flavor = kFlavor_StringSpan;
		this.stringSpanVal = TerminatedStringSpan(val);
	}

	init(val: Type)
	{
		this.flavor = kFlavor_Type;
		this.typeVal = val;
	}

	init(val: DeclRefVal)
	{
		this.flavor = kFlavor_DeclRef;
		this.declRefVal = val;
	}

	init(val: ConstRef<ArgTypeList>)
	{
		this.flavor = kFlavor_ArgTypeList;
		this.argTypeListVal = val;
	}

	var flavor: DiagnosticArgFlavor;
//	union {
		var intVal: Int;
		var tokenCodeVal: TokenCode;
		var nameVal : Ptr<Name>;
		var stringSpanVal : StringSpan;
		var typeVal : Type;

		var declRefVal : DeclRefVal;
		var argTypeListVal : ArgTypeList;
//	}
}

func diagnose(
	sink: Ptr<DiagnosticSink>,
	loc: SourceLoc,
	id:	DiagnosticID)
{
	diagnoseImpl(sink, loc, id, 0, 0);
}

func diagnose(
	sink: Ptr<DiagnosticSink>,
	loc: SourceLoc,
	id:	DiagnosticID,
	arg0: DiagnosticArg)
{
	var args : FixedSizeArray<1, Ptr<DiagnosticArg> >;
	args[0] = &arg0;
	diagnoseImpl(sink, loc, id, 1, args);	
}

func diagnose(
	sink: Ptr<DiagnosticSink>,
	loc: SourceLoc,
	id:	DiagnosticID,
	arg0: DiagnosticArg,
	arg1: DiagnosticArg)
{
	var args : FixedSizeArray<2, Ptr<DiagnosticArg> >;
	args[0] = &arg0;
	args[1] = &arg1;
	diagnoseImpl(sink, loc, id, 2, args);	
}

/*
DiagnosticArg::DiagnosticArg(
	int val)
	: flavor(kFlavor_Int)
{
	intVal = val;
}

DiagnosticArg::DiagnosticArg(
	TokenCode val)
	: flavor(kFlavor_TokenCode)
{
	tokenCodeVal = val;
}

DiagnosticArg::DiagnosticArg(
	Name* val)
	: flavor(kFlavor_Name)
{
	nameVal = val;
}

DiagnosticArg::DiagnosticArg(
	StringSpan text)
	: flavor(kFlavor_StringSpan)
{
	stringSpanVal = text;
}

DiagnosticArg::DiagnosticArg(
	TerminatedStringSpan text)
	: flavor(kFlavor_StringSpan)
{
	stringSpanVal = text;
}

DiagnosticArg::DiagnosticArg(
	char const* text)
	: flavor(kFlavor_StringSpan)
{
	stringSpanVal = TerminatedStringSpan(text);
}

static const char* kSeverityNames[] =
{
	"note",
	"warning",
	"error",
	"fatal",
};

struct DiagnosticInfo
{
	Severity 	severity;
	char const*	message;
};

static const DiagnosticInfo kDiagnostics[] =
{
#define DIAGNOSTIC(severity, id, msg) \
	{ kSeverity_##severity, msg },
#include "thdiagnosticdefs.h"
};
*/

func printVal(
	stream: FILE*,
	val: Val)
{
	if(let type = as<Type>(val))
	{
		printType(stream, type);
	}
	else
	{
		fprintf(stream, "<val>");
	}
}

func printDeclRef(
	stream: FILE*,
	declRef: DeclRefVal)
{
	fprintf(stream, "%s", getText(declRef.getDecl().name).begin);

	if(let spec = declRef.getSpecializations())
	{
		if(declRef.getDecl().parent == spec.genericDeclRef.getDecl())
		{
			fprintf(stream, "<");
			let firstArg = spec.args.head;
			for(var arg = firstArg; arg; arg = arg.next)
			{
				if(arg != firstArg) fprintf(stream, ",");

				printVal(stream, arg.value);
			}
			fprintf(stream, ">");
		}
	}
}

func printType(
	stream: FILE*,
	type: Type)
{
	if(let declRefType = as<DeclRefType>(type))
	{
		printDeclRef(stream, declRefType.declRef);
	}
	else if(let typeType = as<TypeType>(type))
	{
		fprintf(stream, "typeof(");
		printType(stream, typeType.type);
		fprintf(stream, ")");
	}
	else if(let funcType = as<FuncType>(type))
	{
		fprintf(stream, "FUNC_TYPE");
	}
	else if(let errorType = as<ErrorType>(type))
	{
		fprintf(stream, "<error>");
	}
	else if(let overloadGroupType = as<OverloadGroupType>(type))
	{
		fprintf(stream, "<overload group>");
	}
	else if(!type)
	{
		fprintf(stream, "NULL_TYPE");
	}
	else
	{
		fprintf(stream, "UNKNOWN_TYPE(%s)", type.directClass.name);
	}
}

func printDiagnosticArg(
	arg: ConstPtr<DiagnosticArg>)
{
	switch(arg.flavor)
	{
	case kFlavor_Int:
		fprintf(stderr, "%ld", arg.intVal);
		break;

	case kFlavor_TokenCode:
//		fprintf(stderr, "%s", getTokenName(arg.tokenCodeVal));
		fprintf(stderr, "TOKEN: %d", arg.tokenCodeVal);
		break;
		
	case kFlavor_Name:
		{
			let text = getText(arg.nameVal);
			fwrite(text.begin, 1, text.end-text.begin, stderr);
		}
		break;
		
	case kFlavor_StringSpan:
		{
			let text = arg.stringSpanVal;
			fwrite(text.begin, 1, text.end-text.begin, stderr);
		}
		break;

	case kFlavor_Type:
		{
			printType(stderr, arg.typeVal);
		}
		break;

	case kFlavor_ArgTypeList:
		{
			var first = true;
			for(var aa = arg.argTypeListVal.args; aa; aa = aa.next)
			{
				if(!first) fprintf(stderr, ", ");
				printType(stderr, aa.exp.type);
				first = false;
			}
		}
		break;

	case kFlavor_DeclRef:
		{
			printDeclRef(stderr, arg.declRefVal);
		}
		break;
						
	default:
		fprintf(stderr, "UNIMPLEMENTD:%d", arg.flavor);
//		cogAssert(!"unimplemented");
		break;
	}
}

func diagnoseImpl(
	sink: Ptr<DiagnosticSink>,
	loc: SourceLoc,
	id: DiagnosticID,
	argCount: int,
	args: Ptr<Ptr<DiagnosticArg> >)
{
//	DiagnosticInfo const& info = kDiagnostics[id];

	let expandedLoc = expandLoc(sink.session, loc);

	let severity = kSeverity_Error;

	fprintf(stderr, "%s(%ld,%ld): %s: ",
			expandedLoc.file.begin,
			expandedLoc.line,
			expandedLoc.column,
			"error" // kSeverityNames[severity]
			);

	// HACK: for now just print diagnostic ID
	fprintf(stderr, "%d", id);

    for(var ii : int = 0; ii < argCount; ii++ )
    {
    	fprintf(stderr, "[");
    	printDiagnosticArg(args[ii]);
    	fprintf(stderr, "]");
    }

	fprintf(stderr, "\n");

    if(severity >= kSeverity_Error)
    {
        sink.errorCount++;
        if(severity >= kSeverity_Fatal)
        {
        	cogAssert(!"fatal");
            exit(1);
        }
    }


}

/*
{



	char const* cursor = info.message;
	while(*cursor)
	{
		int c = *cursor++;
		if(c != '$')
		{
			fputc(c, stderr);
		}
		else
		{
			int d = *cursor++;
			switch(d)
			{
			case '0': case '1': case '2': case '3': case '4':
			case '5': case '6': case '7': case '8': case '9':
				{
					int index = d - '0';
					printDiagnosticArg(args[index]);
				}
				break;

			default:
				break;
			}
		}
	}


}
*/